/* eslint-disable @typescript-eslint/no-explicit-any */
import { ColisPayload, ColisResponse } from "@/type/colis";
import API from "./api"; // ton instance Axios
import type { AxiosResponse } from "axios";

export const createColis = async (
  data: ColisPayload
): Promise<ColisResponse> => {
  try {
    const response: AxiosResponse<ColisResponse> = await API.post(
      "/colis",
      data
    );
    return response.data;
  } catch (error: any) {
    console.error(
      "Erreur lors de la cr√©ation du colis :",
      error.response?.data || error.message
    );
    throw error;
  }
};

// ‚úÖ R√©ponse quand l‚ÄôAPI renvoie plusieurs colis
export interface ColisListResponse {
  colis: ColisPayload[];
}

// üü¢ R√©cup√©rer TOUS les colis
export const getColis = async (): Promise<ColisPayload[]> => {
  try {
    const response: AxiosResponse<ColisListResponse> = await API.get("/colis");
    return response.data.colis; // un tableau de ColisPayload
  } catch (error: any) {
    console.error(
      "Erreur lors de la r√©cup√©ration des colis :",
      error.response?.data || error.message
    );
    throw error;
  }
};

/**
 * R√©cup√©rer un colis par son ID
 * @param id - ID du colis (UUID)
 */
export const getColiById = async (id: string): Promise<ColisPayload> => {
  try {
    const { data } = await API.get<{ colis: ColisPayload; message?: string }>(
      `/colis/${id}`
    );

    return data.colis;
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du colis:", error);
    throw error.response?.data || error;
  }
};

// ‚úÖ Service pour supprimer un colis (mais pour l‚Äôinstant on log d‚Äôabord les infos)
// ‚úÖ Supprimer un colis (images Cloudinary + BDD, avec rollback si Cloudinary √©choue)
export const deleteColis = async (id: string): Promise<{ message: string }> => {
  try {
    // 1Ô∏è‚É£ R√©cup√©rer le colis
    const colis = await getColiById(id);
    console.log("üì¶ Colis √† supprimer :", colis);

    // 2Ô∏è‚É£ Supprimer les images Cloudinary associ√©es (obligatoire avant la BDD)
    if (colis.imageId && colis.imageId.length > 0) {
      const cloudinaryRes = await fetch("/api/cloudinary/delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ imageIds: colis.imageId }),
      });

      if (!cloudinaryRes.ok) {
        const error = await cloudinaryRes.json();
        console.error("‚ùå Erreur suppression Cloudinary :", error);
        throw new Error("√âchec suppression des images Cloudinary");
      }

      const result = await cloudinaryRes.json();
      console.log("üóëÔ∏è Images Cloudinary supprim√©es :", result);
    }
    // 3Ô∏è‚É£ Supprimer le colis en BDD uniquement si Cloudinary OK
    const response: AxiosResponse<{ message: string }> = await API.delete(
      `/colis/${id}`
    );
    console.log("‚úÖ Colis supprim√© :", response.data);
    return response.data;
  } catch (error: any) {
    console.error(
      "‚ùå Suppression interrompue (rollback activ√©) :",
      error.response?.data || error.message
    );
    throw error;
  }
};

export interface UpdateStatutResponse {
  message: string;
  colis: ColisPayload & {
    createdAt: string;
    updatedAt: string;
  };
}

export interface UpdateStatutResult {
  data: UpdateStatutResponse;
  status: number;
}

/**
 * Met √† jour le statut d'un colis
 * @param id ID du colis
 * @param statut Nouveau statut : "RECU_DESTINATION" | "QUITTE_CHINE"
 * @returns Objet avec data (payload) et status (HTTP)
 */
export const updateColisStatut = async (
  id: string,
  statut: "RECU_DESTINATION" | "QUITTE_CHINE"
): Promise<UpdateStatutResult> => {
  try {
    const response = await API.patch<UpdateStatutResponse>(
      `/colis/${id}/status`,
      {
        statut,
      }
    );

    return {
      data: response.data, // ‚úÖ payload typ√©
      status: response.status, // ‚úÖ code HTTP
    };
  } catch (err: any) {
    console.error(
      "Erreur lors de la mise √† jour du statut :",
      err.response?.data || err.message
    );
    throw err;
  }
};
